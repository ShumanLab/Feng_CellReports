%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% This script to organize all theta mu and r value into easy to paste prism format
% this is for subsample analysis
% OUTPUT: csv shgeet with r and mu value organized for input to prism

% susie 5/29/24
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

% animals = {'TS112-0' 'TS114-0' 'TS114-1'  'TS111-1' 'TS111-2' 'TS115-2' 'TS116-3' ...
%     'TS116-0' 'TS116-2' 'TS117-0' 'TS118-4'  'TS118-0' 'TS118-3' 'TS88-3' 'TS90-0' ...
%     'TS89-1'  'TS114-3'  'TS118-2' 'TS86-1' 'TS89-3' ...
%     'TS91-1' 'TS110-3'  'TS114-2' 'TS115-1' 'TS116-1' ...
%     'TS117-1' 'TS86-2' 'TS89-2' 'TS91-2' 'TS90-2'};  %list of animal have master CA1DG shank that can be processed here %TS112-1 TS113-2 don't have MEC master shank
animals = {'TS112-0' 'TS114-0' 'TS114-1'  'TS111-1' 'TS111-2' 'TS115-2' 'TS116-3' ...
    'TS116-0' 'TS116-2' 'TS117-0' 'TS118-4'  'TS118-0' 'TS118-3' 'TS88-3' 'TS90-0' ...
    'TS89-1' 'TS114-3'  'TS118-2' 'TS86-1' 'TS89-3' ...
    'TS91-1' 'TS110-3' 'TS112-1' 'TS114-2' 'TS113-2' 'TS115-1' 'TS116-1' ...
    'TS117-1' 'TS86-2' 'TS89-2' 'TS91-2' 'TS90-2'}; %list of all animals for susie summer ephys experiment; 113-1 no cells
 
track = 1;



asym=[];
c=[];
c2=[];
meanAC=[];
burst=[];
burstbw = [];
mAmp = [];
mISI=[];
r2CA1=[];
pval2CA1=[];
pval2MEC=[];
mu2CA1=[];
r2MEC=[];
mu2MEC=[];
mFR=[];
FRmean = [];
highestFR = [];
CSI = [];
animal_ind = {};
group_ind = {};

%regions
CA1=[];
DG=[];
uind=0;  %master unit index

for anim=1:length(animals)  %loop through all animals and get info about each cluster
    
    animal=animals{anim};

    [CA1DGshank, CA3shank, MECshank, LECshank]=getCA1DGCA3ECshankFULL_SF(animal);

    for shank=[CA1DGshank]  

        [ch]=getchannels(animal,shank);  % get channels
        group = ch.group;
        %load info about units generated by TSprocessSpikes_Lruntime_SF
        load(['Y:\Susie\2020\Summer_Ephys_ALL\kilosort\' animal '\shank' num2str(shank) 'DGCA1_PL_whenDGCA1cohalign_running1sec_2sec-consec.mat'],'units');
        load(['Y:\Susie\2020\Summer_Ephys_ALL\kilosort\' animal '\shank' num2str(shank) '_processedunitswholetrack.mat']); %unitswholetrack, use this for cell type classification

%         if ~isempty(ch.Pyr2) && ~isempty (ch.Pyr1) %find units in pyr 
%             CA1units=find(units.correctclusterch>=ch.Pyr2 & units.correctclusterch<=ch.Pyr1); %currently only including pyr (previously wa both or and pyr)  
%             CA1=[CA1 CA1units+uind];  
%         end
        if ~isempty(ch.Hil2) && ~isempty (ch.GC1)  %find units in GCL or Hilus 
            DGunits=find(units.correctclusterch>=ch.Hil2 & units.correctclusterch<=ch.GC1); %currently not including mol layer
            DG=[DG DGunits+uind];
        end

        %put spike attributes into master array
        for u=1:length(units.refravio)  %getting all the important info about each unit from file we loaded in earlier 
            uind=uind+1;
            animal_ind{uind} = animal;  %added this so I can know which animal each cluster belongs to for plotting later
            group_ind{uind} = group;
            if ~isnan(units.numspikes(u)) && units.numspikes(u)~=0      % && units.numspikes(u) > 200 && units.refravio(u) < 0.6 %% && units.CA1thetaPL{u}.pval<0.05 &&  units.MECIIthetaPL{u}.pval<0.05  %refravio rate <= 0.6% will be a reasonable cluster to include in - sf
                numspikes(uind)=units.numspikes(u);
                refravio(uind)=units.refravio(u);
                r2CA1(uind)=units.CA1thetaPL{u}.r;
                mu2CA1(uind)=units.CA1thetaPL{u}.mu;
                pval2CA1(uind) = units.CA1thetaPL{u}.pval;
               
                CSI(uind)=unitswholetrack.CSI(u);
                meanAC(uind)=unitswholetrack.meanAC(u); %mean of autocorr
                FRmean(uind)=unitswholetrack.FRmean(u); %method 1: calculate the total time that each cluster show decent firing above meanFR. then devided by this time
                %asym(uind)=unitswholetrack.wavesasym{u}; 
                c(uind)=unitswholetrack.wavesc(u);


            else
                disp(['empty cluster' num2str(u) 'in animal ' animal])
            end
        end

    end
end

% to identify the unqualified units
unqualifylist = [];
for u=1:length(FRmean)
    if numspikes(u) < 50 || refravio(u) > 0.6
        unqualifylist = [u unqualifylist];
    end
end
%to take out from M1 M2 M3 unit list
%CA1_qua_ind=~ismember(CA1,unqualifylist);  %set unqualified as 0, qualified as 1
DG_qua_ind=~ismember(DG,unqualifylist);  %set unqualified as 0, qualified as 1
%CA1 = CA1(CA1_qua_ind(:) == 1);
DG = DG(DG_qua_ind(:) == 1);


%%
% % CLUSTER!
%%use this for hippocampus (reference Zoe and Lauren's way) ************
type = [];
for idx=1:length(CSI)
    if meanAC(idx)> 0.1 && FRmean(idx)>=0.2
         type(idx)=1;
    elseif CSI(idx) > 0 && meanAC(idx)<0.1 && FRmean(idx)<8  && c(idx)>0.26
         type(idx)=2;
     else
         type(idx)=3;
    end
end
inh = find(type == 1);
exc = find(type == 2);
weird = find(type == 3);

 %%
 %Sorting cells into subregions and groups
 %Hippocampus

genotype_ind = zeros(length(group_ind), 1);  %make logical index for genotype
for i=1:length(genotype_ind)
    if group_ind{i} == '3wc'
       genotype_ind(i) = 1;
    elseif group_ind{i} == '3wp'
        genotype_ind(i) = 2;
    elseif group_ind{i} == '8wc'
        genotype_ind(i) = 3;
    elseif group_ind{i} == '8wp'
        genotype_ind(i) = 4;
    end
end

g_3wccells = find(genotype_ind == 1);  %find indices of all 3wc cells
g_3wpcells=find(genotype_ind == 2);     %find indices of all 3wp cells 
g_8wccells=find(genotype_ind == 3);     %find indices of all 8wc cells 
g_8wpcells=find(genotype_ind == 4);     %find indices of all 8wp cells 


eDG=intersect(exc,DG);  
iDG=intersect(inh,DG); 

eDG3wc = intersect(g_3wccells, eDG);
eDG3wp = intersect(g_3wpcells, eDG);
eDG8wc = intersect(g_8wccells, eDG);
eDG8wp = intersect(g_8wpcells, eDG);

iDG3wc = intersect(g_3wccells, iDG);
iDG3wp = intersect(g_3wpcells, iDG);
iDG8wc = intersect(g_8wccells, iDG);
iDG8wp = intersect(g_8wpcells, iDG);

%below is all exc/inh/weird cells for each group

e3wc = intersect(g_3wccells, exc);
e3wp = intersect(g_3wpcells, exc);
e8wc = intersect(g_8wccells, exc);
e8wp = intersect(g_8wpcells, exc);

i3wc = intersect(g_3wccells, inh);
i3wp = intersect(g_3wpcells, inh);
i8wc = intersect(g_8wccells, inh);
i8wp = intersect(g_8wpcells, inh);

% w3wc = intersect(g_3wccells, weird);
% w3wp = intersect(g_3wpcells, weird);
% w8wc = intersect(g_8wccells, weird);
% w8wp = intersect(g_8wpcells, weird);

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%Grabbing values for each group
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% r values by genotype
e_DGr2CA1_3wc = r2CA1(eDG3wc);%r values DG units referenced to CA1
e_DGr2CA1_3wp = r2CA1(eDG3wp);
e_DGr2CA1_8wc = r2CA1(eDG8wc);
e_DGr2CA1_8wp = r2CA1(eDG8wp);
e_DGr2CA1_3wc_ani = animal_ind(eDG3wc);
e_DGr2CA1_3wp_ani = animal_ind(eDG3wp);
e_DGr2CA1_8wc_ani = animal_ind(eDG8wc);
e_DGr2CA1_8wp_ani = animal_ind(eDG8wp);

i_DGr2CA1_3wc = r2CA1(iDG3wc);%inh
i_DGr2CA1_3wp = r2CA1(iDG3wp);
i_DGr2CA1_8wc = r2CA1(iDG8wc);
i_DGr2CA1_8wp = r2CA1(iDG8wp);
i_DGr2CA1_3wc_ani = animal_ind(iDG3wc);
i_DGr2CA1_3wp_ani = animal_ind(iDG3wp);
i_DGr2CA1_8wc_ani = animal_ind(iDG8wc);
i_DGr2CA1_8wp_ani = animal_ind(iDG8wp);

%%%%% asign mu val
e_DGmu2CA1_3wc = mu2CA1(eDG3wc);%r values DG units referenced to CA1
e_DGmu2CA1_3wp = mu2CA1(eDG3wp);
e_DGmu2CA1_8wc = mu2CA1(eDG8wc);
e_DGmu2CA1_8wp = mu2CA1(eDG8wp);
e_DGmu2CA1_3wc_ani = animal_ind(eDG3wc);
e_DGmu2CA1_3wp_ani = animal_ind(eDG3wp);
e_DGmu2CA1_8wc_ani = animal_ind(eDG8wc);
e_DGmu2CA1_8wp_ani = animal_ind(eDG8wp);

i_DGmu2CA1_3wc = mu2CA1(iDG3wc);%inh
i_DGmu2CA1_3wp = mu2CA1(iDG3wp);
i_DGmu2CA1_8wc = mu2CA1(iDG8wc);
i_DGmu2CA1_8wp = mu2CA1(iDG8wp);
i_DGmu2CA1_3wc_ani = animal_ind(iDG3wc);
i_DGmu2CA1_3wp_ani = animal_ind(iDG3wp);
i_DGmu2CA1_8wc_ani = animal_ind(iDG8wc);
i_DGmu2CA1_8wp_ani = animal_ind(iDG8wp);


%%%%% asign p val for mu
e_DG2CA1pval_3wc = pval2CA1(eDG3wc);%mu values DG muefemuenced to CA1 exc
e_DG2CA1pval_3wp = pval2CA1(eDG3wp);
e_DG2CA1pval_8wc = pval2CA1(eDG8wc);
e_DG2CA1pval_8wp = pval2CA1(eDG8wp);

i_DG2CA1pval_3wc = pval2CA1(iDG3wc);%inh
i_DG2CA1pval_3wp = pval2CA1(iDG3wp);
i_DG2CA1pval_8wc = pval2CA1(iDG8wc);
i_DG2CA1pval_8wp = pval2CA1(iDG8wp);

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% combine control group r and mu 

i_DGr2CA1_c = [i_DGr2CA1_3wc i_DGr2CA1_8wc];
i_DGmu2CA1_c = [i_DGmu2CA1_3wc i_DGmu2CA1_8wc];

e_DGr2CA1_c = [e_DGr2CA1_3wc e_DGr2CA1_8wc];
e_DGmu2CA1_c = [e_DGmu2CA1_3wc e_DGmu2CA1_8wc];

%circ r pval
e_DG2CA1pval_c = [e_DG2CA1pval_3wc e_DG2CA1pval_8wc];
i_DG2CA1pval_c = [i_DG2CA1pval_3wc i_DG2CA1pval_8wc];


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% take out units in mu list that have non-significant r-circ p val (generate new list, don't overwrite)
%control
i_DGmu2CA1_c_clean = i_DGmu2CA1_c(find(i_DG2CA1pval_c<0.05));
e_DGmu2CA1_c_clean = e_DGmu2CA1_c(find(e_DG2CA1pval_c<0.05));

%3wp
i_DGmu2CA1_3wp_clean = i_DGmu2CA1_3wp(find(i_DG2CA1pval_3wp<0.05));
e_DGmu2CA1_3wp_clean = e_DGmu2CA1_3wp(find(e_DG2CA1pval_3wp<0.05));

%8wp
i_DGmu2CA1_8wp_clean = i_DGmu2CA1_8wp(find(i_DG2CA1pval_8wp<0.05));
e_DGmu2CA1_8wp_clean = e_DGmu2CA1_8wp(find(e_DG2CA1pval_8wp<0.05));

%%%%%%%%%%%%%%%%%%%%%% double for plot
i_DGmu2CA1_c_clean_double = [rad2deg(i_DGmu2CA1_c_clean)+180 rad2deg(i_DGmu2CA1_c_clean) + 540];
i_DGmu2CA1_3wp_clean_double = [rad2deg(i_DGmu2CA1_3wp_clean)+180 rad2deg(i_DGmu2CA1_3wp_clean) + 540];
i_DGmu2CA1_8wp_clean_double = [rad2deg(i_DGmu2CA1_8wp_clean)+180 rad2deg(i_DGmu2CA1_8wp_clean) + 540];
e_DGmu2CA1_c_clean_double = [rad2deg(e_DGmu2CA1_c_clean)+180 rad2deg(e_DGmu2CA1_c_clean) + 540];
e_DGmu2CA1_3wp_clean_double = [rad2deg(e_DGmu2CA1_3wp_clean)+180 rad2deg(e_DGmu2CA1_3wp_clean) + 540];
e_DGmu2CA1_8wp_clean_double = [rad2deg(e_DGmu2CA1_8wp_clean)+180 rad2deg(e_DGmu2CA1_8wp_clean) + 540];


%%%%%%%%%%%%%%%%%%%%%  mu stats
savepath='L:\Susie\SummerEphysHPCEC\AnalysisOutput\HPCEC_analysis\subsample_ana\new_1sec\0.5SD\mu\DGCA1subsample\';
if exist(savepath)==0
     mkdir(savepath);
end

titlelist = {};
pvallist = [];


% iDG 2 CA1
data = {i_DGmu2CA1_c_clean_double, i_DGmu2CA1_3wp_clean_double, i_DGmu2CA1_8wp_clean_double}; %data use for plot
data_mu_stats = {i_DGmu2CA1_c_clean, i_DGmu2CA1_3wp_clean, i_DGmu2CA1_8wp_clean}; %data use for stats
title_name = 'Mu Value of DG inh cells to CA1 theta';
scatterdouble_mu_SF(data, {'Control', '3wp', '8wp'}, {'blue', 'm','red'}, title_name, savepath);


[pval, k, K] = circ_kuipertest(data_mu_stats{1},data_mu_stats{2});
[pval_k, f] = circ_ktest(data_mu_stats{1},data_mu_stats{2});
[pval_w, t] = circ_wwtest(data_mu_stats{1},data_mu_stats{2});
stats_name = 'Mu Value of DG inh cells to CA1 theta (C vs 3wp)';
titlelist_mu(1,1) = {convertCharsToStrings(stats_name)};
pvallist_mu(1,1) = pval;
pvallist_mu(1,2) = pval_k;
pvallist_mu(1,3) = pval_w;

[pval, k, K] = circ_kuipertest(data_mu_stats{1},data_mu_stats{3});
[pval_k, f] = circ_ktest(data_mu_stats{1},data_mu_stats{3});
[pval_w, t] = circ_wwtest(data_mu_stats{1},data_mu_stats{3});
stats_name = 'Mu Value of DG inh cells to CA1 theta (C vs 8wp)';
titlelist_mu(2,1) = {convertCharsToStrings(stats_name)};
pvallist_mu(2,1) = pval;
pvallist_mu(2,2) = pval_k;
pvallist_mu(2,3) = pval_w;

[pval, k, K] = circ_kuipertest(data_mu_stats{2},data_mu_stats{3});
[pval_k, f] = circ_ktest(data_mu_stats{2},data_mu_stats{3});
[pval_w, t] = circ_wwtest(data_mu_stats{2},data_mu_stats{3});
stats_name = 'Mu Value of DG inh cells to CA1 theta (3wp vs 8wp)';
titlelist_mu(3,1) = {convertCharsToStrings(stats_name)};
pvallist_mu(3,1) = pval;
pvallist_mu(3,2) = pval_k;
pvallist_mu(3,3) = pval_w;


% eDG 2 CA1
data = {e_DGmu2CA1_c_clean_double, e_DGmu2CA1_3wp_clean_double, e_DGmu2CA1_8wp_clean_double}; %data use for plot
data_mu_stats = {e_DGmu2CA1_c_clean, e_DGmu2CA1_3wp_clean, e_DGmu2CA1_8wp_clean}; %data use for stats
title_name = 'Mu Value of DG exc cells to CA1 theta';
scatterdouble_mu_SF(data, {'Control', '3wp', '8wp'}, {'blue', 'm','red'}, title_name, savepath);


[pval, k, K] = circ_kuipertest(data_mu_stats{1},data_mu_stats{2});
[pval_k, f] = circ_ktest(data_mu_stats{1},data_mu_stats{2});
[pval_w, t] = circ_wwtest(data_mu_stats{1},data_mu_stats{2});
stats_name = 'Mu Value of DG exc cells to CA1 theta (C vs 3wp)';
titlelist_mu(4,1) = {convertCharsToStrings(stats_name)};
pvallist_mu(4,1) = pval;
pvallist_mu(4,2) = pval_k;
pvallist_mu(4,3) = pval_w;

[pval, k, K] = circ_kuipertest(data_mu_stats{1},data_mu_stats{3});
[pval_k, f] = circ_ktest(data_mu_stats{1},data_mu_stats{3});
[pval_w, t] = circ_wwtest(data_mu_stats{1},data_mu_stats{3});
stats_name = 'Mu Value of DG exc cells to CA1 theta (C vs 8wp)';
titlelist_mu(5,1) = {convertCharsToStrings(stats_name)};
pvallist_mu(5,1) = pval;
pvallist_mu(5,2) = pval_k;
pvallist_mu(5,3) = pval_w;

[pval, k, K] = circ_kuipertest(data_mu_stats{2},data_mu_stats{3});
[pval_k, f] = circ_ktest(data_mu_stats{2},data_mu_stats{3});
[pval_w, t] = circ_wwtest(data_mu_stats{2},data_mu_stats{3});
stats_name = 'Mu Value of DG exc cells to CA1 theta (3wp vs 8wp)';
titlelist_mu(6,1) = {convertCharsToStrings(stats_name)};
pvallist_mu(6,1) = pval;
pvallist_mu(6,2) = pval_k;
pvallist_mu(6,3) = pval_w;
%save mu pval table
mu_pvaltable = table(titlelist_mu, pvallist_mu); %write pval to a table
writetable(mu_pvaltable, 'L:\Susie\SummerEphysHPCEC\AnalysisOutput\HPCEC_analysis\subsample_ana\new_1sec\0.5SD\mu\DGCA1subsample\mu_pvaltable_HPC_whenalignDGCA1.csv','Delimiter',',') %first col: name; second col: pval for kuipertest/Mann-Whitney test; third col: pval for ktest (for centralization). forth col: Wwtest (for equal means) 

%% SAVE r sheet
savepath='L:\Susie\SummerEphysHPCEC\AnalysisOutput\HPCEC_analysis\subsample_ana\new_1sec\0.5SD\r\DGCA1subsample\';
if exist(savepath)==0
     mkdir(savepath);
end


% DG2CA1_r_exc/inh
table = rval_to_prism(e_DGr2CA1_3wc_ani, e_DGr2CA1_3wc);
writetable(table, 'L:\Susie\SummerEphysHPCEC\AnalysisOutput\HPCEC_analysis\subsample_ana\new_1sec\0.5SD\r\DGCA1subsample\e_DGr2CA1_3wc_whenalignDGCA1.csv','Delimiter',',') %first col: name; second col: pval for kuipertest/Mann-Whitney test; third col: pval for ktest (for centralization). forth col: Wwtest (for equal means) 

table = rval_to_prism(e_DGr2CA1_3wp_ani, e_DGr2CA1_3wp);
writetable(table, 'L:\Susie\SummerEphysHPCEC\AnalysisOutput\HPCEC_analysis\subsample_ana\new_1sec\0.5SD\r\DGCA1subsample\e_DGr2CA1_3wp_whenalignDGCA1.csv','Delimiter',',') %first col: name; second col: pval for kuipertest/Mann-Whitney test; third col: pval for ktest (for centralization). forth col: Wwtest (for equal means) 

table = rval_to_prism(e_DGr2CA1_8wc_ani, e_DGr2CA1_8wc);
writetable(table, 'L:\Susie\SummerEphysHPCEC\AnalysisOutput\HPCEC_analysis\subsample_ana\new_1sec\0.5SD\r\DGCA1subsample\e_DGr2CA1_8wc_whenalignDGCA1.csv','Delimiter',',') %first col: name; second col: pval for kuipertest/Mann-Whitney test; third col: pval for ktest (for centralization). forth col: Wwtest (for equal means) 

table = rval_to_prism(e_DGr2CA1_8wp_ani, e_DGr2CA1_8wp);
writetable(table, 'L:\Susie\SummerEphysHPCEC\AnalysisOutput\HPCEC_analysis\subsample_ana\new_1sec\0.5SD\r\DGCA1subsample\e_DGr2CA1_8wp_whenalignDGCA1.csv','Delimiter',',') %first col: name; second col: pval for kuipertest/Mann-Whitney test; third col: pval for ktest (for centralization). forth col: Wwtest (for equal means) 

table = rval_to_prism(i_DGr2CA1_3wc_ani, i_DGr2CA1_3wc);
writetable(table, 'L:\Susie\SummerEphysHPCEC\AnalysisOutput\HPCEC_analysis\subsample_ana\new_1sec\0.5SD\r\DGCA1subsample\i_DGr2CA1_3wc_whenalignDGCA1.csv','Delimiter',',') %first col: name; second col: pval for kuipertest/Mann-Whitney test; third col: pval for ktest (for centralization). forth col: Wwtest (for equal means) 

table = rval_to_prism(i_DGr2CA1_3wp_ani, i_DGr2CA1_3wp);
writetable(table, 'L:\Susie\SummerEphysHPCEC\AnalysisOutput\HPCEC_analysis\subsample_ana\new_1sec\0.5SD\r\DGCA1subsample\i_DGr2CA1_3wp_whenalignDGCA1.csv','Delimiter',',') %first col: name; second col: pval for kuipertest/Mann-Whitney test; third col: pval for ktest (for centralization). forth col: Wwtest (for equal means) 

table = rval_to_prism(i_DGr2CA1_8wc_ani, i_DGr2CA1_8wc);
writetable(table, 'L:\Susie\SummerEphysHPCEC\AnalysisOutput\HPCEC_analysis\subsample_ana\new_1sec\0.5SD\r\DGCA1subsample\i_DGr2CA1_8wc_whenalignDGCA1.csv','Delimiter',',') %first col: name; second col: pval for kuipertest/Mann-Whitney test; third col: pval for ktest (for centralization). forth col: Wwtest (for equal means) 

table = rval_to_prism(i_DGr2CA1_8wp_ani, i_DGr2CA1_8wp);
writetable(table, 'L:\Susie\SummerEphysHPCEC\AnalysisOutput\HPCEC_analysis\subsample_ana\new_1sec\0.5SD\r\DGCA1subsample\i_DGr2CA1_8wp_whenalignDGCA1.csv','Delimiter',',') %first col: name; second col: pval for kuipertest/Mann-Whitney test; third col: pval for ktest (for centralization). forth col: Wwtest (for equal means) 

%% save mu sheet
savepath='L:\Susie\SummerEphysHPCEC\AnalysisOutput\HPCEC_analysis\subsample_ana\new_1sec\0.5SD\mu\DGCA1subsample\';
if exist(savepath)==0
     mkdir(savepath);
end
writematrix(i_DGmu2CA1_c_clean_double, 'L:\Susie\SummerEphysHPCEC\AnalysisOutput\HPCEC_analysis\subsample_ana\new_1sec\0.5SD\mu\DGCA1subsample\i_DGmu2CA1_c_clean_double_whenalignDGCA1.csv','Delimiter',',') %first col: name; second col: pval for kuipertest/Mann-Whitney test; third col: pval for ktest (for centralization). forth col: Wwtest (for equal means) 
writematrix(i_DGmu2CA1_3wp_clean_double, 'L:\Susie\SummerEphysHPCEC\AnalysisOutput\HPCEC_analysis\subsample_ana\new_1sec\0.5SD\mu\DGCA1subsample\i_DGmu2CA1_3wp_clean_double_whenalignDGCA1.csv','Delimiter',',') %first col: name; second col: pval for kuipertest/Mann-Whitney test; third col: pval for ktest (for centralization). forth col: Wwtest (for equal means) 
writematrix(i_DGmu2CA1_8wp_clean_double, 'L:\Susie\SummerEphysHPCEC\AnalysisOutput\HPCEC_analysis\subsample_ana\new_1sec\0.5SD\mu\DGCA1subsample\i_DGmu2CA1_8wp_clean_double_whenalignDGCA1.csv','Delimiter',',') %first col: name; second col: pval for kuipertest/Mann-Whitney test; third col: pval for ktest (for centralization). forth col: Wwtest (for equal means) 
writematrix(e_DGmu2CA1_c_clean_double, 'L:\Susie\SummerEphysHPCEC\AnalysisOutput\HPCEC_analysis\subsample_ana\new_1sec\0.5SD\mu\DGCA1subsample\e_DGmu2CA1_c_clean_double_whenalignDGCA1.csv','Delimiter',',') %first col: name; second col: pval for kuipertest/Mann-Whitney test; third col: pval for ktest (for centralization). forth col: Wwtest (for equal means) 
writematrix(e_DGmu2CA1_3wp_clean_double, 'L:\Susie\SummerEphysHPCEC\AnalysisOutput\HPCEC_analysis\subsample_ana\new_1sec\0.5SD\mu\DGCA1subsample\e_DGmu2CA1_3wp_clean_double_whenalignDGCA1.csv','Delimiter',',') %first col: name; second col: pval for kuipertest/Mann-Whitney test; third col: pval for ktest (for centralization). forth col: Wwtest (for equal means) 
writematrix(e_DGmu2CA1_8wp_clean_double, 'L:\Susie\SummerEphysHPCEC\AnalysisOutput\HPCEC_analysis\subsample_ana\new_1sec\0.5SD\mu\DGCA1subsample\e_DGmu2CA1_8wp_clean_double_whenalignDGCA1.csv','Delimiter',',') %first col: name; second col: pval for kuipertest/Mann-Whitney test; third col: pval for ktest (for centralization). forth col: Wwtest (for equal means) 

