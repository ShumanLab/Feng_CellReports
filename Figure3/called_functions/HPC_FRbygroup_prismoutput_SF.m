%%%%%%%%%%%%%%%%%%%%
% This is to generate csv files with fire rate of each group to put in prism
% For HPC DG and CA1 units
% susie 5/25/23
%%%%%%%%%%%%%%%%%%%%

% animals = {'TS112-0' 'TS114-0' 'TS114-1'  'TS111-1' 'TS111-2' 'TS115-2' 'TS116-3' ...
%     'TS116-0' 'TS116-2' 'TS117-0' 'TS118-4'  'TS118-0' 'TS118-3' 'TS88-3' 'TS90-0' ...
%     'TS89-1'  'TS114-3' 'TS113-1'  'TS118-2' 'TS86-1' 'TS89-3' ...
%     'TS91-1' 'TS110-3' 'TS112-1' 'TS114-2' 'TS113-2' 'TS115-1' 'TS116-1' ...
%     'TS117-1' 'TS86-2' 'TS89-2' 'TS91-2' 'TS90-2'}; %list of all animals for susie summer ephys experiment
%113-1 no units, %110-0 117-4 113-3 seizures for control, taking out
%
%below is if to keep units consistent with phase analysis units - went with this
animals = {'TS112-0' 'TS114-0' 'TS114-1'  'TS111-1' 'TS111-2' 'TS115-2' 'TS116-3' ...
    'TS116-0' 'TS116-2' 'TS117-0' 'TS118-4'  'TS118-0' 'TS118-3' 'TS88-3' 'TS90-0' ...
    'TS89-1'  'TS114-3'  'TS118-2' 'TS86-1' 'TS89-3' ...
    'TS91-1' 'TS110-3'  'TS114-2' 'TS115-1' 'TS116-1' ...
    'TS117-1' 'TS86-2' 'TS89-2' 'TS91-2' 'TS90-2'};  %list of animal have master CA1DG shank that can be processed here %TS112-1 TS113-2 don't have MEC master shank
track = 1;

mFR=[];
FRmean = [];
FRmeanwhole = [];
highestFR = [];
animal_ind = {};
group_ind = {};
CA1=[]; 
DG=[];

uind=0;  %master unit index

for a = 1:length(animals)
    animal = animals(a);
    exp_dir=get_exp(animal);
    load([exp_dir '\exp.mat'])
    [CA1DGshank, CA3shank, MECshank, LECshank]=getCA1DGCA3ECshankFULL_SF(animal);
    for shank=[CA1DGshank]  %for now I only have 1 shank for each animal, I will edit getshank function if later want to add more single units data from more shanks
        [ch]=getchannels(animal,shank);  % get channels
        group = ch.group;
        %load info about units generated by TSprocessSpikes_Lruntime_SF
        load(['Y:\Susie\2020\Summer_Ephys_ALL\kilosort\' animal '\shank' num2str(shank) '_processedunits_run_track' num2str(track) '.mat']); %units
        load(['Y:\Susie\2020\Summer_Ephys_ALL\kilosort\' animal '\shank' num2str(shank) '_processedunitswholetrack.mat']); %unitswholetrack, use this for cell type classification
      
        if ~isempty(ch.Pyr2) && ~isempty (ch.Pyr1) %find units in oriens or pyr 
            CA1units=find(units.correctclusterch>=ch.Pyr2 & units.correctclusterch<=ch.Pyr1); %currently only including pyr (previously wa both or and pyr)  
            CA1=[CA1 CA1units+uind];  
        end
        if ~isempty(ch.Hil2) && ~isempty (ch.GC1)  %find units in GCL or Hilus 
            DGunits=find(units.correctclusterch>=ch.Hil2 & units.correctclusterch<=ch.GC1); %currently not including mol layer
            DG=[DG DGunits+uind];
        end
    
     %put spike attributes into master array
         for u=1:length(units.waveforms)   %getting all the important info about each unit from file we loaded in earlier 
            uind=uind+1;
            animal_ind{uind} = animal;  %added this so I can know which animal each cluster belongs to for plotting later
            group_ind{uind} = group;
               
              if ~isempty(units.spikes{u})      % && units.numspikes(u) > 200 && units.refravio(u) < 0.6 %% && units.CA1thetaPL{u}.pval<0.05 &&  units.MECIIthetaPL{u}.pval<0.05  %refravio rate <= 0.6% will be a reasonable cluster to include in - sf
                numspikes(uind)=units.numspikes(u);
                refravio(uind)=units.refravio(u);
                r2CA1(uind)=units.CA1thetaPL{u}.r;
                mu2CA1(uind)=units.CA1thetaPL{u}.mu;
                pval2CA1(uind) = units.CA1thetaPL{u}.pval;
                r2MEC(uind)=units.MECIIthetaPL{u}.r;
                mu2MEC(uind)=units.MECIIthetaPL{u}.mu;
                pval2MEC(uind) = units.MECIIthetaPL{u}.pval;
                r2DG(uind)=units.DGthetaPL{u}.r; 
                mu2DG(uind)=units.DGthetaPL{u}.mu;
                pval2DG(uind) = units.DGthetaPL{u}.pval;
%                 mFR(uind)=units.mFR(u);   %toatl spike/total time
                FRmean_track1(uind)=units.FRmean(u); %method 1: calculate the total time that each cluster show decent firing above meanFR. then devided by this time
%                 highestFR(uind)=units.highestFR(u);   % Method2: take the highest FR for certain length of time bins, use that as FR
                burst(uind)=units.burst(u);
                burstbw(uind) = units.burstbw(u);
                mISI(uind)=units.mISI(u);
                mAmp(uind)=units.mAmp(u);

                CSI(uind)=unitswholetrack.CSI(u);
                meanAC(uind)=unitswholetrack.meanAC(u); %mean of autocorr
                FRmean(uind)=unitswholetrack.FRmean(u); %method 1: calculate the total time that each cluster show decent firing above meanFR. then devided by this time
                %asym(uind)=unitswholetrack.wavesasym{u}; 
                c(uind)=unitswholetrack.wavesc(u);

            elseif isempty(units.spikes{u})
                disp(['empty cluster' num2str(u) 'in animal ' animal])
            end
        end
    end %end each shank
end %end each animal

% to identify the unqualified units
unqualifylist = [];
for u=1:length(FRmean)
    if numspikes(u) < 200 || refravio(u) > 0.6
        unqualifylist = [u unqualifylist];
    end
end
%to take out from M1 M2 M3 unit list
CA1_qua_ind=~ismember(CA1,unqualifylist);  %set unqualified as 0, qualified as 1
DG_qua_ind=~ismember(DG,unqualifylist);  %set unqualified as 0, qualified as 1
CA1 = CA1(CA1_qua_ind(:) == 1);
DG = DG(DG_qua_ind(:) == 1);

%% CLUSTER
%%use this for hippocampus (reference Zoe and Lauren's way) ************
type = [];
for idx=1:length(CSI)
    if meanAC(idx)> 0.1 && FRmean(idx)>=0.2
         type(idx)=1;
    elseif CSI(idx) > 0 && meanAC(idx)<0.1 && FRmean(idx)<8  && c(idx)>0.26
         type(idx)=2;
     else
         type(idx)=3;
    end
end
inh = find(type == 1);
exc = find(type == 2);
weird = find(type == 3);

% old parameter
% type = [];
% for idx=1:length(CSI)
%     if CSI(idx)<20 && meanAC(idx)> 0.11 && FRmeanwhole(idx)>=2.5
%          type(idx)=1;
%     elseif CSI(idx) > 5 && meanAC(idx)<0.11 && FRmeanwhole(idx)<8   %susie change FR from 5 to 5.5 since using FRmean now
%          type(idx)=2;
%      else
%          type(idx)=3;
%     end
% end
% inh = find(type == 1);
% exc = find(type == 2);

 %%
genotype_ind = zeros(length(group_ind), 1);  %make logical index for genotype
for i=1:length(genotype_ind)
    if group_ind{i} == '3wc'
       genotype_ind(i) = 1;
    elseif group_ind{i} == '3wp'
        genotype_ind(i) = 2;
    elseif group_ind{i} == '8wc'
        genotype_ind(i) = 3;
    elseif group_ind{i} == '8wp'
        genotype_ind(i) = 4;
    end
end


g_3wccells = find(genotype_ind == 1);  %find indices of all 3wc cells
g_3wpcells=find(genotype_ind == 2);     %find indices of all 3wp cells 
g_8wccells=find(genotype_ind == 3);     %find indices of all 8wc cells 
g_8wpcells=find(genotype_ind == 4);     %find indices of all 8wp cells 
g_ccells = find(genotype_ind == 1 | genotype_ind == 3); %find all control cells


eDG=intersect(exc,DG);  
iDG=intersect(inh,DG); 
eCA1=intersect(exc,CA1); 
iCA1=intersect(inh,CA1); 

eDG_3wc = intersect(g_3wccells, eDG);
eDG_3wp = intersect(g_3wpcells, eDG);
eDG_8wc = intersect(g_8wccells, eDG);
eDG_8wp = intersect(g_8wpcells, eDG);
eDG_c = intersect(g_ccells, eDG);

iDG_3wc = intersect(g_3wccells, iDG);
iDG_3wp = intersect(g_3wpcells, iDG);
iDG_8wc = intersect(g_8wccells, iDG);
iDG_8wp = intersect(g_8wpcells, iDG);
iDG_c = intersect(g_ccells, iDG);

eCA1_3wc = intersect(g_3wccells, eCA1);
eCA1_3wp = intersect(g_3wpcells, eCA1);
eCA1_8wc = intersect(g_8wccells, eCA1);
eCA1_8wp = intersect(g_8wpcells, eCA1);
eCA1_c = intersect(g_ccells, eCA1);

iCA1_3wc = intersect(g_3wccells, iCA1);
iCA1_3wp = intersect(g_3wpcells, iCA1);
iCA1_8wc = intersect(g_8wccells, iCA1);
iCA1_8wp = intersect(g_8wpcells, iCA1);
iCA1_c = intersect(g_ccells, iCA1);
%%%%%%%%%%%%%%%%

%% save FR in csv
savepath='L:\Susie\SummerEphysHPCEC\AnalysisOutput\HPCEC_analysis\singleunit_FR\HPCunits\';
if exist(savepath)==0
     mkdir(savepath);
end

writematrix(FRmean_track1(eCA1_c), 'L:\Susie\SummerEphysHPCEC\AnalysisOutput\HPCEC_analysis\singleunit_FR\HPCunits\eCA1_c.csv','Delimiter',',') 
writematrix(FRmean_track1(eCA1_3wp), 'L:\Susie\SummerEphysHPCEC\AnalysisOutput\HPCEC_analysis\singleunit_FR\HPCunits\eCA1_3wp.csv','Delimiter',',') 
writematrix(FRmean_track1(eCA1_8wp), 'L:\Susie\SummerEphysHPCEC\AnalysisOutput\HPCEC_analysis\singleunit_FR\HPCunits\eCA1_8wp.csv','Delimiter',',') 

writematrix(FRmean_track1(iCA1_c), 'L:\Susie\SummerEphysHPCEC\AnalysisOutput\HPCEC_analysis\singleunit_FR\HPCunits\iCA1_c.csv','Delimiter',',') 
writematrix(FRmean_track1(iCA1_3wp), 'L:\Susie\SummerEphysHPCEC\AnalysisOutput\HPCEC_analysis\singleunit_FR\HPCunits\iCA1_3wp.csv','Delimiter',',') 
writematrix(FRmean_track1(iCA1_8wp), 'L:\Susie\SummerEphysHPCEC\AnalysisOutput\HPCEC_analysis\singleunit_FR\HPCunits\iCA1_8wp.csv','Delimiter',',') 

writematrix(FRmean_track1(eDG_c), 'L:\Susie\SummerEphysHPCEC\AnalysisOutput\HPCEC_analysis\singleunit_FR\HPCunits\eDG_c.csv','Delimiter',',') 
writematrix(FRmean_track1(eDG_3wp), 'L:\Susie\SummerEphysHPCEC\AnalysisOutput\HPCEC_analysis\singleunit_FR\HPCunits\eDG_3wp.csv','Delimiter',',') 
writematrix(FRmean_track1(eDG_8wp), 'L:\Susie\SummerEphysHPCEC\AnalysisOutput\HPCEC_analysis\singleunit_FR\HPCunits\eDG_8wp.csv','Delimiter',',') 

writematrix(FRmean_track1(iDG_c), 'L:\Susie\SummerEphysHPCEC\AnalysisOutput\HPCEC_analysis\singleunit_FR\HPCunits\iDG_c.csv','Delimiter',',') 
writematrix(FRmean_track1(iDG_3wp), 'L:\Susie\SummerEphysHPCEC\AnalysisOutput\HPCEC_analysis\singleunit_FR\HPCunits\iDG_3wp.csv','Delimiter',',') 
writematrix(FRmean_track1(iDG_8wp), 'L:\Susie\SummerEphysHPCEC\AnalysisOutput\HPCEC_analysis\singleunit_FR\HPCunits\iDG_8wp.csv','Delimiter',',') 




